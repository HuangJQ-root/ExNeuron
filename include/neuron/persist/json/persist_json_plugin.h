/**
 * NEURON IIoT System for Industry 4.0
 * Copyright (C) 2020-2022 EMQ Technologies Co., Ltd All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 **/

/*
 * DO NOT EDIT THIS FILE MANUALLY!
 * It was automatically generated by `json-autotype`.
 */

#ifndef _NEU_JSON_API_PERSIST_JSON_PLUGIN_H_
#define _NEU_JSON_API_PERSIST_JSON_PLUGIN_H_

#include "json/json.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef char *neu_json_plugin_req_plugin_t;

typedef struct {
    int                           n_plugin;
    neu_json_plugin_req_plugin_t *plugins;
} neu_json_plugin_req_t;

int  neu_json_decode_plugin_req(char *buf, neu_json_plugin_req_t **result);
void neu_json_decode_plugin_req_free(neu_json_plugin_req_t *req);

/**
 * @brief 定义用于存储插件响应信息的字符串指针类型
 * 
 * 该类型本质上是一个字符指针，用于指向存储插件相关响应信息的字符串，
 * 字符串内的信息以 JSON 格式组织，包含插件的各种属性数据。
 */
typedef char *neu_json_plugin_resp_plugin_t;

/**
 * @brief 用于表示 JSON 格式的插件响应数据的结构体
 * 
 * 该结构体主要用于组织和存储与插件相关的响应信息，
 * 例如插件的数量以及插件的具体信息列表等内容。
 */
typedef struct {
    /**
     * @brief 插件的数量
     * 
     * 表示响应中包含的插件的总数，通过该成员可以了解到后续插件信息数组的大小。
     */
    int                            n_plugin;

    /**
     * @brief 指向存储插件信息的字符串指针
     * 
     * 该指针指向的内存区域存储了表示插件详细响应信息的字符串，
     * 字符串内容可能包含插件的名称、版本等信息，具体格式取决于实际的 JSON 数据格式要求。
     * 可以存在多个这样的字符串，其数量由 n_plugin 成员指定。
     */
    neu_json_plugin_resp_plugin_t *plugins;
} neu_json_plugin_resp_t;

int neu_json_encode_plugin_resp(void *json_object, void *param);

#ifdef __cplusplus
}
#endif

#endif
